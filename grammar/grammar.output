Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier ID ';' s_atomic_var_declaration
    7                | type_specifier ID '[' NUM ']' ';' s_array_declaration

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier ID '(' params ')' s_save_address compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier ID s_atomic_param_declaration
   16      | type_specifier ID '[' ']' s_array_param_declaration

   17 compound_stmt: '{' local_declarations statement_list '}'

   18 local_declarations: local_declarations var_declaration
   19                   | ε

   20 statement_list: statement_list statement
   21               | ε

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt

   28 expression_stmt: expression ';'
   29                | "break" ';'
   30                | ';'

   31 selection_stmt: "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"

   33 iteration_stmt: "while" s_label '(' expression ')' s_save statement

   34 return_stmt: "return" ';'
   35            | "return" expression ';'

   36 switch_stmt: s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'

   37 case_stmts: case_stmts case_stmt
   38           | ε

   39 case_stmt: "case" NUM s_switch_jf ':' statement_list

   40 default_stmt: "default" ':' statement_list
   41             | ε

   42 expression: var '=' expression s_Assign
   43           | simple_expression

   44 var: s_PID ID
   45    | s_PID ID '[' expression ']'

   46 simple_expression: additive_expression relop additive_expression
   47                  | additive_expression

   48 relop: '<'
   49      | "=="

   50 additive_expression: additive_expression addop term
   51                    | term

   52 addop: '+'
   53      | '-'

   54 term: term mulop factor
   55     | factor

   56 mulop: '*'
   57      | '/'

   58 factor: '(' expression ')'
   59       | var
   60       | call
   61       | s_push_num NUM

   62 call: s_PID ID '(' args ')'

   63 args: arg_list
   64     | ε

   65 arg_list: arg_list ',' expression
   66         | expression

   67 s_PID: ε

   68 s_Assign: ε

   69 s_jpf: ε

   70 s_jpf_save: ε

   71 s_jp: ε

   72 s_label: ε

   73 s_save: ε

   74 s_jmp_to_expr: ε

   75 s_switch_jf: ε

   76 s_atomic_var_declaration: ε

   77 s_array_declaration: ε

   78 s_atomic_param_declaration: ε

   79 s_array_param_declaration: ε

   80 s_save_address: ε

   81 s_push_num: ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 31 32 33 36 58 62
    ')' (41) 10 31 32 33 36 58 62
    '*' (42) 56
    '+' (43) 52
    ',' (44) 13 65
    '-' (45) 53
    '/' (47) 57
    ':' (58) 39 40
    ';' (59) 6 7 28 29 30 34 35
    '<' (60) 48
    '=' (61) 42
    '[' (91) 7 16 45
    ']' (93) 7 16 45
    '{' (123) 17 36
    '}' (125) 17 36
    error (256)
    NUM (258) 7 39 61
    ID (259) 6 7 10 15 16 44 45 62
    "int" (260) 8
    "void" (261) 9 12
    "break" (262) 29
    "if" (263) 31 32
    "endif" (264) 31 32
    "else" (265) 32
    "while" (266) 33
    "return" (267) 34 35
    "switch" (268) 36
    "case" (269) 39
    "default" (270) 40
    "==" (271) 49


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    declaration_list (34)
        on left: 2 3
        on right: 1 2
    declaration (35)
        on left: 4 5
        on right: 2 3
    var_declaration (36)
        on left: 6 7
        on right: 4 18
    type_specifier (37)
        on left: 8 9
        on right: 6 7 10 15 16
    fun_declaration (38)
        on left: 10
        on right: 5
    params (39)
        on left: 11 12
        on right: 10
    param_list (40)
        on left: 13 14
        on right: 11 13
    param (41)
        on left: 15 16
        on right: 13 14
    compound_stmt (42)
        on left: 17
        on right: 10 23
    local_declarations (43)
        on left: 18 19
        on right: 17 18
    statement_list (44)
        on left: 20 21
        on right: 17 20 39 40
    statement (45)
        on left: 22 23 24 25 26 27
        on right: 20 31 32 33
    expression_stmt (46)
        on left: 28 29 30
        on right: 22
    selection_stmt (47)
        on left: 31 32
        on right: 24
    iteration_stmt (48)
        on left: 33
        on right: 25
    return_stmt (49)
        on left: 34 35
        on right: 26
    switch_stmt (50)
        on left: 36
        on right: 27
    case_stmts (51)
        on left: 37 38
        on right: 36 37
    case_stmt (52)
        on left: 39
        on right: 37
    default_stmt (53)
        on left: 40 41
        on right: 36
    expression (54)
        on left: 42 43
        on right: 28 31 32 33 35 36 42 45 58 65 66
    var (55)
        on left: 44 45
        on right: 42 59
    simple_expression (56)
        on left: 46 47
        on right: 43
    relop (57)
        on left: 48 49
        on right: 46
    additive_expression (58)
        on left: 50 51
        on right: 46 47 50
    addop (59)
        on left: 52 53
        on right: 50
    term (60)
        on left: 54 55
        on right: 50 51 54
    mulop (61)
        on left: 56 57
        on right: 54
    factor (62)
        on left: 58 59 60 61
        on right: 54 55
    call (63)
        on left: 62
        on right: 60
    args (64)
        on left: 63 64
        on right: 62
    arg_list (65)
        on left: 65 66
        on right: 63 65
    s_PID (66)
        on left: 67
        on right: 44 45 62
    s_Assign (67)
        on left: 68
        on right: 42
    s_jpf (68)
        on left: 69
        on right: 31
    s_jpf_save (69)
        on left: 70
        on right: 32
    s_jp (70)
        on left: 71
        on right: 32
    s_label (71)
        on left: 72
        on right: 33
    s_save (72)
        on left: 73
        on right: 31 32 33 36
    s_jmp_to_expr (73)
        on left: 74
        on right: 36
    s_switch_jf (74)
        on left: 75
        on right: 39
    s_atomic_var_declaration (75)
        on left: 76
        on right: 6
    s_array_declaration (76)
        on left: 77
        on right: 7
    s_atomic_param_declaration (77)
        on left: 78
        on right: 15
    s_array_param_declaration (78)
        on left: 79
        on right: 16
    s_save_address (79)
        on left: 80
        on right: 10
    s_push_num (80)
        on left: 81
        on right: 61


State 0

    0 $accept: • program $end
    1 program: • declaration_list
    2 declaration_list: • declaration_list declaration
    3                 | • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier ID ';' s_atomic_var_declaration
    7                | • type_specifier ID '[' NUM ']' ';' s_array_declaration
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier ID '(' params ')' s_save_address compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


State 1

    8 type_specifier: "int" •

    $default  reduce using rule 8 (type_specifier)


State 2

    9 type_specifier: "void" •

    $default  reduce using rule 9 (type_specifier)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declaration_list •  [$end]
    2 declaration_list: declaration_list • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier ID ';' s_atomic_var_declaration
    7                | • type_specifier ID '[' NUM ']' ';' s_array_declaration
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier ID '(' params ')' s_save_address compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


State 5

    3 declaration_list: declaration •

    $default  reduce using rule 3 (declaration_list)


State 6

    4 declaration: var_declaration •

    $default  reduce using rule 4 (declaration)


State 7

    6 var_declaration: type_specifier • ID ';' s_atomic_var_declaration
    7                | type_specifier • ID '[' NUM ']' ';' s_array_declaration
   10 fun_declaration: type_specifier • ID '(' params ')' s_save_address compound_stmt

    ID  shift, and go to state 11


State 8

    5 declaration: fun_declaration •

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declaration_list: declaration_list declaration •

    $default  reduce using rule 2 (declaration_list)


State 11

    6 var_declaration: type_specifier ID • ';' s_atomic_var_declaration
    7                | type_specifier ID • '[' NUM ']' ';' s_array_declaration
   10 fun_declaration: type_specifier ID • '(' params ')' s_save_address compound_stmt

    ';'  shift, and go to state 12
    '['  shift, and go to state 13
    '('  shift, and go to state 14


State 12

    6 var_declaration: type_specifier ID ';' • s_atomic_var_declaration
   76 s_atomic_var_declaration: ε •

    $default  reduce using rule 76 (s_atomic_var_declaration)

    s_atomic_var_declaration  go to state 15


State 13

    7 var_declaration: type_specifier ID '[' • NUM ']' ';' s_array_declaration

    NUM  shift, and go to state 16


State 14

    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: type_specifier ID '(' • params ')' s_save_address compound_stmt
   11 params: • param_list
   12       | • "void"
   13 param_list: • param_list ',' param
   14           | • param
   15 param: • type_specifier ID s_atomic_param_declaration
   16      | • type_specifier ID '[' ']' s_array_param_declaration

    "int"   shift, and go to state 1
    "void"  shift, and go to state 17

    type_specifier  go to state 18
    params          go to state 19
    param_list      go to state 20
    param           go to state 21


State 15

    6 var_declaration: type_specifier ID ';' s_atomic_var_declaration •

    $default  reduce using rule 6 (var_declaration)


State 16

    7 var_declaration: type_specifier ID '[' NUM • ']' ';' s_array_declaration

    ']'  shift, and go to state 22


State 17

    9 type_specifier: "void" •  [ID]
   12 params: "void" •  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


State 18

   15 param: type_specifier • ID s_atomic_param_declaration
   16      | type_specifier • ID '[' ']' s_array_param_declaration

    ID  shift, and go to state 23


State 19

   10 fun_declaration: type_specifier ID '(' params • ')' s_save_address compound_stmt

    ')'  shift, and go to state 24


State 20

   11 params: param_list •  [')']
   13 param_list: param_list • ',' param

    ','  shift, and go to state 25

    $default  reduce using rule 11 (params)


State 21

   14 param_list: param •

    $default  reduce using rule 14 (param_list)


State 22

    7 var_declaration: type_specifier ID '[' NUM ']' • ';' s_array_declaration

    ';'  shift, and go to state 26


State 23

   15 param: type_specifier ID • s_atomic_param_declaration
   16      | type_specifier ID • '[' ']' s_array_param_declaration
   78 s_atomic_param_declaration: ε •  [')', ',']

    '['  shift, and go to state 27

    $default  reduce using rule 78 (s_atomic_param_declaration)

    s_atomic_param_declaration  go to state 28


State 24

   10 fun_declaration: type_specifier ID '(' params ')' • s_save_address compound_stmt
   80 s_save_address: ε •

    $default  reduce using rule 80 (s_save_address)

    s_save_address  go to state 29


State 25

    8 type_specifier: • "int"
    9               | • "void"
   13 param_list: param_list ',' • param
   15 param: • type_specifier ID s_atomic_param_declaration
   16      | • type_specifier ID '[' ']' s_array_param_declaration

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 18
    param           go to state 30


State 26

    7 var_declaration: type_specifier ID '[' NUM ']' ';' • s_array_declaration
   77 s_array_declaration: ε •

    $default  reduce using rule 77 (s_array_declaration)

    s_array_declaration  go to state 31


State 27

   16 param: type_specifier ID '[' • ']' s_array_param_declaration

    ']'  shift, and go to state 32


State 28

   15 param: type_specifier ID s_atomic_param_declaration •

    $default  reduce using rule 15 (param)


State 29

   10 fun_declaration: type_specifier ID '(' params ')' s_save_address • compound_stmt
   17 compound_stmt: • '{' local_declarations statement_list '}'

    '{'  shift, and go to state 33

    compound_stmt  go to state 34


State 30

   13 param_list: param_list ',' param •

    $default  reduce using rule 13 (param_list)


State 31

    7 var_declaration: type_specifier ID '[' NUM ']' ';' s_array_declaration •

    $default  reduce using rule 7 (var_declaration)


State 32

   16 param: type_specifier ID '[' ']' • s_array_param_declaration
   79 s_array_param_declaration: ε •

    $default  reduce using rule 79 (s_array_param_declaration)

    s_array_param_declaration  go to state 35


State 33

   17 compound_stmt: '{' • local_declarations statement_list '}'
   18 local_declarations: • local_declarations var_declaration
   19                   | ε •

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 36


State 34

   10 fun_declaration: type_specifier ID '(' params ')' s_save_address compound_stmt •

    $default  reduce using rule 10 (fun_declaration)


State 35

   16 param: type_specifier ID '[' ']' s_array_param_declaration •

    $default  reduce using rule 16 (param)


State 36

    6 var_declaration: • type_specifier ID ';' s_atomic_var_declaration
    7                | • type_specifier ID '[' NUM ']' ';' s_array_declaration
    8 type_specifier: • "int"
    9               | • "void"
   17 compound_stmt: '{' local_declarations • statement_list '}'
   18 local_declarations: local_declarations • var_declaration
   20 statement_list: • statement_list statement
   21               | ε •  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 37
    type_specifier   go to state 38
    statement_list   go to state 39


State 37

   18 local_declarations: local_declarations var_declaration •

    $default  reduce using rule 18 (local_declarations)


State 38

    6 var_declaration: type_specifier • ID ';' s_atomic_var_declaration
    7                | type_specifier • ID '[' NUM ']' ';' s_array_declaration

    ID  shift, and go to state 40


State 39

   17 compound_stmt: • '{' local_declarations statement_list '}'
   17              | '{' local_declarations statement_list • '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • "while" s_label '(' expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   73 s_save: ε •  ["switch"]
   81 s_push_num: ε •  [NUM]

    ';'       shift, and go to state 41
    '('       shift, and go to state 42
    '{'       shift, and go to state 33
    '}'       shift, and go to state 43
    "break"   shift, and go to state 44
    "if"      shift, and go to state 45
    "while"   shift, and go to state 46
    "return"  shift, and go to state 47

    NUM       reduce using rule 81 (s_push_num)
    "switch"  reduce using rule 73 (s_save)
    $default  reduce using rule 67 (s_PID)

    compound_stmt        go to state 48
    statement            go to state 49
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_save               go to state 63
    s_push_num           go to state 64


State 40

    6 var_declaration: type_specifier ID • ';' s_atomic_var_declaration
    7                | type_specifier ID • '[' NUM ']' ';' s_array_declaration

    ';'  shift, and go to state 12
    '['  shift, and go to state 13


State 41

   30 expression_stmt: ';' •

    $default  reduce using rule 30 (expression_stmt)


State 42

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   58       | '(' • expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 65
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_push_num           go to state 64


State 43

   17 compound_stmt: '{' local_declarations statement_list '}' •

    $default  reduce using rule 17 (compound_stmt)


State 44

   29 expression_stmt: "break" • ';'

    ';'  shift, and go to state 66


State 45

   31 selection_stmt: "if" • '(' expression ')' s_save statement s_jpf "endif"
   32               | "if" • '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"

    '('  shift, and go to state 67


State 46

   33 iteration_stmt: "while" • s_label '(' expression ')' s_save statement
   72 s_label: ε •

    $default  reduce using rule 72 (s_label)

    s_label  go to state 68


State 47

   34 return_stmt: "return" • ';'
   35            | "return" • expression ';'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    ';'  shift, and go to state 69
    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 70
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_push_num           go to state 64


State 48

   23 statement: compound_stmt •

    $default  reduce using rule 23 (statement)


State 49

   20 statement_list: statement_list statement •

    $default  reduce using rule 20 (statement_list)


State 50

   22 statement: expression_stmt •

    $default  reduce using rule 22 (statement)


State 51

   24 statement: selection_stmt •

    $default  reduce using rule 24 (statement)


State 52

   25 statement: iteration_stmt •

    $default  reduce using rule 25 (statement)


State 53

   26 statement: return_stmt •

    $default  reduce using rule 26 (statement)


State 54

   27 statement: switch_stmt •

    $default  reduce using rule 27 (statement)


State 55

   28 expression_stmt: expression • ';'

    ';'  shift, and go to state 71


State 56

   42 expression: var • '=' expression s_Assign
   59 factor: var •  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 72

    $default  reduce using rule 59 (factor)


State 57

   43 expression: simple_expression •

    $default  reduce using rule 43 (expression)


State 58

   46 simple_expression: additive_expression • relop additive_expression
   47                  | additive_expression •  [';', ']', ')', ',']
   48 relop: • '<'
   49      | • "=="
   50 additive_expression: additive_expression • addop term
   52 addop: • '+'
   53      | • '-'

    '<'   shift, and go to state 73
    "=="  shift, and go to state 74
    '+'   shift, and go to state 75
    '-'   shift, and go to state 76

    $default  reduce using rule 47 (simple_expression)

    relop  go to state 77
    addop  go to state 78


State 59

   51 additive_expression: term •  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term • mulop factor
   56 mulop: • '*'
   57      | • '/'

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 51 (additive_expression)

    mulop  go to state 81


State 60

   55 term: factor •

    $default  reduce using rule 55 (term)


State 61

   60 factor: call •

    $default  reduce using rule 60 (factor)


State 62

   44 var: s_PID • ID
   45    | s_PID • ID '[' expression ']'
   62 call: s_PID • ID '(' args ')'

    ID  shift, and go to state 82


State 63

   36 switch_stmt: s_save • s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   73 s_save: ε •

    $default  reduce using rule 73 (s_save)

    s_save  go to state 83


State 64

   61 factor: s_push_num • NUM

    NUM  shift, and go to state 84


State 65

   58 factor: '(' expression • ')'

    ')'  shift, and go to state 85


State 66

   29 expression_stmt: "break" ';' •

    $default  reduce using rule 29 (expression_stmt)


State 67

   31 selection_stmt: "if" '(' • expression ')' s_save statement s_jpf "endif"
   32               | "if" '(' • expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 86
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_push_num           go to state 64


State 68

   33 iteration_stmt: "while" s_label • '(' expression ')' s_save statement

    '('  shift, and go to state 87


State 69

   34 return_stmt: "return" ';' •

    $default  reduce using rule 34 (return_stmt)


State 70

   35 return_stmt: "return" expression • ';'

    ';'  shift, and go to state 88


State 71

   28 expression_stmt: expression ';' •

    $default  reduce using rule 28 (expression_stmt)


State 72

   42 expression: • var '=' expression s_Assign
   42           | var '=' • expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 89
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_push_num           go to state 64


State 73

   48 relop: '<' •

    $default  reduce using rule 48 (relop)


State 74

   49 relop: "==" •

    $default  reduce using rule 49 (relop)


State 75

   52 addop: '+' •

    $default  reduce using rule 52 (addop)


State 76

   53 addop: '-' •

    $default  reduce using rule 53 (addop)


State 77

   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: additive_expression relop • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    var                  go to state 90
    additive_expression  go to state 91
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_push_num           go to state 64


State 78

   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   50 additive_expression: additive_expression addop • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    var         go to state 90
    term        go to state 92
    factor      go to state 60
    call        go to state 61
    s_PID       go to state 62
    s_push_num  go to state 64


State 79

   56 mulop: '*' •

    $default  reduce using rule 56 (mulop)


State 80

   57 mulop: '/' •

    $default  reduce using rule 57 (mulop)


State 81

   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   54 term: term mulop • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    var         go to state 90
    factor      go to state 93
    call        go to state 61
    s_PID       go to state 62
    s_push_num  go to state 64


State 82

   44 var: s_PID ID •  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   45    | s_PID ID • '[' expression ']'
   62 call: s_PID ID • '(' args ')'

    '['  shift, and go to state 94
    '('  shift, and go to state 95

    $default  reduce using rule 44 (var)


State 83

   36 switch_stmt: s_save s_save • "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'

    "switch"  shift, and go to state 96


State 84

   61 factor: s_push_num NUM •

    $default  reduce using rule 61 (factor)


State 85

   58 factor: '(' expression ')' •

    $default  reduce using rule 58 (factor)


State 86

   31 selection_stmt: "if" '(' expression • ')' s_save statement s_jpf "endif"
   32               | "if" '(' expression • ')' s_save statement "else" s_jpf_save statement s_jp "endif"

    ')'  shift, and go to state 97


State 87

   33 iteration_stmt: "while" s_label '(' • expression ')' s_save statement
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 98
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_push_num           go to state 64


State 88

   35 return_stmt: "return" expression ';' •

    $default  reduce using rule 35 (return_stmt)


State 89

   42 expression: var '=' expression • s_Assign
   68 s_Assign: ε •

    $default  reduce using rule 68 (s_Assign)

    s_Assign  go to state 99


State 90

   59 factor: var •

    $default  reduce using rule 59 (factor)


State 91

   46 simple_expression: additive_expression relop additive_expression •  [';', ']', ')', ',']
   50 additive_expression: additive_expression • addop term
   52 addop: • '+'
   53      | • '-'

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76

    $default  reduce using rule 46 (simple_expression)

    addop  go to state 78


State 92

   50 additive_expression: additive_expression addop term •  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term • mulop factor
   56 mulop: • '*'
   57      | • '/'

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 50 (additive_expression)

    mulop  go to state 81


State 93

   54 term: term mulop factor •

    $default  reduce using rule 54 (term)


State 94

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   45    | s_PID ID '[' • expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 100
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_push_num           go to state 64


State 95

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   62     | s_PID ID '(' • args ')'
   63 args: • arg_list
   64     | ε •  [')']
   65 arg_list: • arg_list ',' expression
   66         | • expression
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    $default  reduce using rule 64 (args)

    expression           go to state 101
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    args                 go to state 102
    arg_list             go to state 103
    s_PID                go to state 62
    s_push_num           go to state 64


State 96

   36 switch_stmt: s_save s_save "switch" • '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 104


State 97

   31 selection_stmt: "if" '(' expression ')' • s_save statement s_jpf "endif"
   32               | "if" '(' expression ')' • s_save statement "else" s_jpf_save statement s_jp "endif"
   73 s_save: ε •

    $default  reduce using rule 73 (s_save)

    s_save  go to state 105


State 98

   33 iteration_stmt: "while" s_label '(' expression • ')' s_save statement

    ')'  shift, and go to state 106


State 99

   42 expression: var '=' expression s_Assign •

    $default  reduce using rule 42 (expression)


State 100

   45 var: s_PID ID '[' expression • ']'

    ']'  shift, and go to state 107


State 101

   66 arg_list: expression •

    $default  reduce using rule 66 (arg_list)


State 102

   62 call: s_PID ID '(' args • ')'

    ')'  shift, and go to state 108


State 103

   63 args: arg_list •  [')']
   65 arg_list: arg_list • ',' expression

    ','  shift, and go to state 109

    $default  reduce using rule 63 (args)


State 104

   36 switch_stmt: s_save s_save "switch" '(' • s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   74 s_jmp_to_expr: ε •

    $default  reduce using rule 74 (s_jmp_to_expr)

    s_jmp_to_expr  go to state 110


State 105

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   31               | "if" '(' expression ')' s_save • statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   32               | "if" '(' expression ')' s_save • statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • "while" s_label '(' expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   73 s_save: ε •  ["switch"]
   81 s_push_num: ε •  [NUM]

    ';'       shift, and go to state 41
    '('       shift, and go to state 42
    '{'       shift, and go to state 33
    "break"   shift, and go to state 44
    "if"      shift, and go to state 45
    "while"   shift, and go to state 46
    "return"  shift, and go to state 47

    NUM       reduce using rule 81 (s_push_num)
    "switch"  reduce using rule 73 (s_save)
    $default  reduce using rule 67 (s_PID)

    compound_stmt        go to state 48
    statement            go to state 111
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_save               go to state 63
    s_push_num           go to state 64


State 106

   33 iteration_stmt: "while" s_label '(' expression ')' • s_save statement
   73 s_save: ε •

    $default  reduce using rule 73 (s_save)

    s_save  go to state 112


State 107

   45 var: s_PID ID '[' expression ']' •

    $default  reduce using rule 45 (var)


State 108

   62 call: s_PID ID '(' args ')' •

    $default  reduce using rule 62 (call)


State 109

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   65 arg_list: arg_list ',' • expression
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 113
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_push_num           go to state 64


State 110

   36 switch_stmt: s_save s_save "switch" '(' s_jmp_to_expr • expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   81 s_push_num: ε •  [NUM]

    '('  shift, and go to state 42

    NUM       reduce using rule 81 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 114
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_push_num           go to state 64


State 111

   31 selection_stmt: "if" '(' expression ')' s_save statement • s_jpf "endif"
   32               | "if" '(' expression ')' s_save statement • "else" s_jpf_save statement s_jp "endif"
   69 s_jpf: ε •  ["endif"]

    "else"  shift, and go to state 115

    $default  reduce using rule 69 (s_jpf)

    s_jpf  go to state 116


State 112

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • "while" s_label '(' expression ')' s_save statement
   33               | "while" s_label '(' expression ')' s_save • statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   73 s_save: ε •  ["switch"]
   81 s_push_num: ε •  [NUM]

    ';'       shift, and go to state 41
    '('       shift, and go to state 42
    '{'       shift, and go to state 33
    "break"   shift, and go to state 44
    "if"      shift, and go to state 45
    "while"   shift, and go to state 46
    "return"  shift, and go to state 47

    NUM       reduce using rule 81 (s_push_num)
    "switch"  reduce using rule 73 (s_save)
    $default  reduce using rule 67 (s_PID)

    compound_stmt        go to state 48
    statement            go to state 117
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_save               go to state 63
    s_push_num           go to state 64


State 113

   65 arg_list: arg_list ',' expression •

    $default  reduce using rule 65 (arg_list)


State 114

   36 switch_stmt: s_save s_save "switch" '(' s_jmp_to_expr expression • ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 118


State 115

   32 selection_stmt: "if" '(' expression ')' s_save statement "else" • s_jpf_save statement s_jp "endif"
   70 s_jpf_save: ε •

    $default  reduce using rule 70 (s_jpf_save)

    s_jpf_save  go to state 119


State 116

   31 selection_stmt: "if" '(' expression ')' s_save statement s_jpf • "endif"

    "endif"  shift, and go to state 120


State 117

   33 iteration_stmt: "while" s_label '(' expression ')' s_save statement •

    $default  reduce using rule 33 (iteration_stmt)


State 118

   36 switch_stmt: s_save s_save "switch" '(' s_jmp_to_expr expression ')' • '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 121


State 119

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   32               | "if" '(' expression ')' s_save statement "else" s_jpf_save • statement s_jp "endif"
   33 iteration_stmt: • "while" s_label '(' expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   73 s_save: ε •  ["switch"]
   81 s_push_num: ε •  [NUM]

    ';'       shift, and go to state 41
    '('       shift, and go to state 42
    '{'       shift, and go to state 33
    "break"   shift, and go to state 44
    "if"      shift, and go to state 45
    "while"   shift, and go to state 46
    "return"  shift, and go to state 47

    NUM       reduce using rule 81 (s_push_num)
    "switch"  reduce using rule 73 (s_save)
    $default  reduce using rule 67 (s_PID)

    compound_stmt        go to state 48
    statement            go to state 122
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_save               go to state 63
    s_push_num           go to state 64


State 120

   31 selection_stmt: "if" '(' expression ')' s_save statement s_jpf "endif" •

    $default  reduce using rule 31 (selection_stmt)


State 121

   36 switch_stmt: s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' • case_stmts default_stmt '}'
   37 case_stmts: • case_stmts case_stmt
   38           | ε •

    $default  reduce using rule 38 (case_stmts)

    case_stmts  go to state 123


State 122

   32 selection_stmt: "if" '(' expression ')' s_save statement "else" s_jpf_save statement • s_jp "endif"
   71 s_jp: ε •

    $default  reduce using rule 71 (s_jp)

    s_jp  go to state 124


State 123

   36 switch_stmt: s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts • default_stmt '}'
   37 case_stmts: case_stmts • case_stmt
   39 case_stmt: • "case" NUM s_switch_jf ':' statement_list
   40 default_stmt: • "default" ':' statement_list
   41             | ε •  ['}']

    "case"     shift, and go to state 125
    "default"  shift, and go to state 126

    $default  reduce using rule 41 (default_stmt)

    case_stmt     go to state 127
    default_stmt  go to state 128


State 124

   32 selection_stmt: "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp • "endif"

    "endif"  shift, and go to state 129


State 125

   39 case_stmt: "case" • NUM s_switch_jf ':' statement_list

    NUM  shift, and go to state 130


State 126

   40 default_stmt: "default" • ':' statement_list

    ':'  shift, and go to state 131


State 127

   37 case_stmts: case_stmts case_stmt •

    $default  reduce using rule 37 (case_stmts)


State 128

   36 switch_stmt: s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt • '}'

    '}'  shift, and go to state 132


State 129

   32 selection_stmt: "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif" •

    $default  reduce using rule 32 (selection_stmt)


State 130

   39 case_stmt: "case" NUM • s_switch_jf ':' statement_list
   75 s_switch_jf: ε •

    $default  reduce using rule 75 (s_switch_jf)

    s_switch_jf  go to state 133


State 131

   20 statement_list: • statement_list statement
   21               | ε •
   40 default_stmt: "default" ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 134


State 132

   36 switch_stmt: s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}' •

    $default  reduce using rule 36 (switch_stmt)


State 133

   39 case_stmt: "case" NUM s_switch_jf • ':' statement_list

    ':'  shift, and go to state 135


State 134

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • "while" s_label '(' expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   40 default_stmt: "default" ':' statement_list •  ['}']
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   73 s_save: ε •  ["switch"]
   81 s_push_num: ε •  [NUM]

    ';'       shift, and go to state 41
    '('       shift, and go to state 42
    '{'       shift, and go to state 33
    "break"   shift, and go to state 44
    "if"      shift, and go to state 45
    "while"   shift, and go to state 46
    "return"  shift, and go to state 47

    NUM       reduce using rule 81 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    "switch"  reduce using rule 73 (s_save)
    $default  reduce using rule 40 (default_stmt)

    compound_stmt        go to state 48
    statement            go to state 49
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_save               go to state 63
    s_push_num           go to state 64


State 135

   20 statement_list: • statement_list statement
   21               | ε •
   39 case_stmt: "case" NUM s_switch_jf ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 136


State 136

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • "while" s_label '(' expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • s_save s_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   39 case_stmt: "case" NUM s_switch_jf ':' statement_list •  ['}', "case", "default"]
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   73 s_save: ε •  ["switch"]
   81 s_push_num: ε •  [NUM]

    ';'       shift, and go to state 41
    '('       shift, and go to state 42
    '{'       shift, and go to state 33
    "break"   shift, and go to state 44
    "if"      shift, and go to state 45
    "while"   shift, and go to state 46
    "return"  shift, and go to state 47

    NUM       reduce using rule 81 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    "switch"  reduce using rule 73 (s_save)
    $default  reduce using rule 39 (case_stmt)

    compound_stmt        go to state 48
    statement            go to state 49
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    s_PID                go to state 62
    s_save               go to state 63
    s_push_num           go to state 64

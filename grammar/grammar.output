Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier ID ';' s_atomic_var_declaration
    7                | type_specifier ID '[' NUM ']' ';' s_array_declaration

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier ID s_set_return_value_address '(' params ')' s_label compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier ID s_atomic_param_declaration
   16      | type_specifier ID '[' ']' s_array_param_declaration

   17 compound_stmt: '{' local_declarations statement_list '}'

   18 local_declarations: local_declarations var_declaration
   19                   | ε

   20 statement_list: statement_list statement
   21               | ε

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt

   28 expression_stmt: expression ';' s_pop_stack
   29                | s_check_break "break" s_break_out ';'
   30                | ';'

   31 selection_stmt: "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"

   33 iteration_stmt: s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' s_save statement

   34 return_stmt: "return" ';'
   35            | "return" expression s_return_expression ';'

   36 switch_stmt: s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'

   37 case_stmts: case_stmts case_stmt
   38           | ε

   39 case_stmt: "case" s_switch_jf NUM ':' statement_list

   40 default_stmt: "default" ':' statement_list
   41             | ε

   42 expression: var '=' expression s_Assign
   43           | simple_expression

   44 var: s_PID ID
   45    | s_PID ID '[' expression ']' s_array_select

   46 simple_expression: additive_expression relop additive_expression
   47                  | additive_expression

   48 relop: '<'
   49      | "=="

   50 additive_expression: additive_expression addop term
   51                    | term

   52 addop: '+'
   53      | '-'

   54 term: term mulop factor
   55     | factor

   56 mulop: '*'
   57      | '/'

   58 factor: '(' expression ')'
   59       | var
   60       | call
   61       | s_push_num NUM

   62 call: s_PID ID '(' args ')'

   63 args: arg_list
   64     | ε

   65 arg_list: arg_list ',' expression
   66         | expression

   67 s_PID: ε

   68 s_Assign: ε

   69 s_jpf: ε

   70 s_jpf_save: ε

   71 s_jp: ε

   72 s_label: ε

   73 s_save: ε

   74 s_jmp_to_expr: ε

   75 s_switch_jf: ε

   76 s_atomic_var_declaration: ε

   77 s_array_declaration: ε

   78 s_atomic_param_declaration: ε

   79 s_array_param_declaration: ε

   80 s_push_num: ε

   81 s_pop_stack: ε

   82 s_switch_save: ε

   83 s_array_select: ε

   84 s_check_break: ε

   85 s_break_out: ε

   86 s_return_expression: ε

   87 s_set_return_value_address: ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 31 32 33 36 58 62
    ')' (41) 10 31 32 33 36 58 62
    '*' (42) 56
    '+' (43) 52
    ',' (44) 13 65
    '-' (45) 53
    '/' (47) 57
    ':' (58) 39 40
    ';' (59) 6 7 28 29 30 34 35
    '<' (60) 48
    '=' (61) 42
    '[' (91) 7 16 45
    ']' (93) 7 16 45
    '{' (123) 17 36
    '}' (125) 17 36
    error (256)
    NUM (258) 7 39 61
    ID (259) 6 7 10 15 16 44 45 62
    "int" (260) 8
    "void" (261) 9 12
    "break" (262) 29
    "if" (263) 31 32
    "endif" (264) 31 32
    "else" (265) 32
    "while" (266) 33
    "return" (267) 34 35
    "switch" (268) 36
    "case" (269) 39
    "default" (270) 40
    "==" (271) 49


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    declaration_list (34)
        on left: 2 3
        on right: 1 2
    declaration (35)
        on left: 4 5
        on right: 2 3
    var_declaration (36)
        on left: 6 7
        on right: 4 18
    type_specifier (37)
        on left: 8 9
        on right: 6 7 10 15 16
    fun_declaration (38)
        on left: 10
        on right: 5
    params (39)
        on left: 11 12
        on right: 10
    param_list (40)
        on left: 13 14
        on right: 11 13
    param (41)
        on left: 15 16
        on right: 13 14
    compound_stmt (42)
        on left: 17
        on right: 10 23
    local_declarations (43)
        on left: 18 19
        on right: 17 18
    statement_list (44)
        on left: 20 21
        on right: 17 20 39 40
    statement (45)
        on left: 22 23 24 25 26 27
        on right: 20 31 32 33
    expression_stmt (46)
        on left: 28 29 30
        on right: 22
    selection_stmt (47)
        on left: 31 32
        on right: 24
    iteration_stmt (48)
        on left: 33
        on right: 25
    return_stmt (49)
        on left: 34 35
        on right: 26
    switch_stmt (50)
        on left: 36
        on right: 27
    case_stmts (51)
        on left: 37 38
        on right: 36 37
    case_stmt (52)
        on left: 39
        on right: 37
    default_stmt (53)
        on left: 40 41
        on right: 36
    expression (54)
        on left: 42 43
        on right: 28 31 32 33 35 36 42 45 58 65 66
    var (55)
        on left: 44 45
        on right: 42 59
    simple_expression (56)
        on left: 46 47
        on right: 43
    relop (57)
        on left: 48 49
        on right: 46
    additive_expression (58)
        on left: 50 51
        on right: 46 47 50
    addop (59)
        on left: 52 53
        on right: 50
    term (60)
        on left: 54 55
        on right: 50 51 54
    mulop (61)
        on left: 56 57
        on right: 54
    factor (62)
        on left: 58 59 60 61
        on right: 54 55
    call (63)
        on left: 62
        on right: 60
    args (64)
        on left: 63 64
        on right: 62
    arg_list (65)
        on left: 65 66
        on right: 63 65
    s_PID (66)
        on left: 67
        on right: 44 45 62
    s_Assign (67)
        on left: 68
        on right: 42
    s_jpf (68)
        on left: 69
        on right: 31
    s_jpf_save (69)
        on left: 70
        on right: 32
    s_jp (70)
        on left: 71
        on right: 32
    s_label (71)
        on left: 72
        on right: 10 33
    s_save (72)
        on left: 73
        on right: 31 32 33
    s_jmp_to_expr (73)
        on left: 74
        on right: 33 36
    s_switch_jf (74)
        on left: 75
        on right: 39
    s_atomic_var_declaration (75)
        on left: 76
        on right: 6
    s_array_declaration (76)
        on left: 77
        on right: 7
    s_atomic_param_declaration (77)
        on left: 78
        on right: 15
    s_array_param_declaration (78)
        on left: 79
        on right: 16
    s_push_num (79)
        on left: 80
        on right: 61
    s_pop_stack (80)
        on left: 81
        on right: 28
    s_switch_save (81)
        on left: 82
        on right: 33 36
    s_array_select (82)
        on left: 83
        on right: 45
    s_check_break (83)
        on left: 84
        on right: 29
    s_break_out (84)
        on left: 85
        on right: 29
    s_return_expression (85)
        on left: 86
        on right: 35
    s_set_return_value_address (86)
        on left: 87
        on right: 10


State 0

    0 $accept: • program $end
    1 program: • declaration_list
    2 declaration_list: • declaration_list declaration
    3                 | • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier ID ';' s_atomic_var_declaration
    7                | • type_specifier ID '[' NUM ']' ';' s_array_declaration
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier ID s_set_return_value_address '(' params ')' s_label compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


State 1

    8 type_specifier: "int" •

    $default  reduce using rule 8 (type_specifier)


State 2

    9 type_specifier: "void" •

    $default  reduce using rule 9 (type_specifier)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declaration_list •  [$end]
    2 declaration_list: declaration_list • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier ID ';' s_atomic_var_declaration
    7                | • type_specifier ID '[' NUM ']' ';' s_array_declaration
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier ID s_set_return_value_address '(' params ')' s_label compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


State 5

    3 declaration_list: declaration •

    $default  reduce using rule 3 (declaration_list)


State 6

    4 declaration: var_declaration •

    $default  reduce using rule 4 (declaration)


State 7

    6 var_declaration: type_specifier • ID ';' s_atomic_var_declaration
    7                | type_specifier • ID '[' NUM ']' ';' s_array_declaration
   10 fun_declaration: type_specifier • ID s_set_return_value_address '(' params ')' s_label compound_stmt

    ID  shift, and go to state 11


State 8

    5 declaration: fun_declaration •

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declaration_list: declaration_list declaration •

    $default  reduce using rule 2 (declaration_list)


State 11

    6 var_declaration: type_specifier ID • ';' s_atomic_var_declaration
    7                | type_specifier ID • '[' NUM ']' ';' s_array_declaration
   10 fun_declaration: type_specifier ID • s_set_return_value_address '(' params ')' s_label compound_stmt
   87 s_set_return_value_address: ε •  ['(']

    ';'  shift, and go to state 12
    '['  shift, and go to state 13

    $default  reduce using rule 87 (s_set_return_value_address)

    s_set_return_value_address  go to state 14


State 12

    6 var_declaration: type_specifier ID ';' • s_atomic_var_declaration
   76 s_atomic_var_declaration: ε •

    $default  reduce using rule 76 (s_atomic_var_declaration)

    s_atomic_var_declaration  go to state 15


State 13

    7 var_declaration: type_specifier ID '[' • NUM ']' ';' s_array_declaration

    NUM  shift, and go to state 16


State 14

   10 fun_declaration: type_specifier ID s_set_return_value_address • '(' params ')' s_label compound_stmt

    '('  shift, and go to state 17


State 15

    6 var_declaration: type_specifier ID ';' s_atomic_var_declaration •

    $default  reduce using rule 6 (var_declaration)


State 16

    7 var_declaration: type_specifier ID '[' NUM • ']' ';' s_array_declaration

    ']'  shift, and go to state 18


State 17

    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: type_specifier ID s_set_return_value_address '(' • params ')' s_label compound_stmt
   11 params: • param_list
   12       | • "void"
   13 param_list: • param_list ',' param
   14           | • param
   15 param: • type_specifier ID s_atomic_param_declaration
   16      | • type_specifier ID '[' ']' s_array_param_declaration

    "int"   shift, and go to state 1
    "void"  shift, and go to state 19

    type_specifier  go to state 20
    params          go to state 21
    param_list      go to state 22
    param           go to state 23


State 18

    7 var_declaration: type_specifier ID '[' NUM ']' • ';' s_array_declaration

    ';'  shift, and go to state 24


State 19

    9 type_specifier: "void" •  [ID]
   12 params: "void" •  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


State 20

   15 param: type_specifier • ID s_atomic_param_declaration
   16      | type_specifier • ID '[' ']' s_array_param_declaration

    ID  shift, and go to state 25


State 21

   10 fun_declaration: type_specifier ID s_set_return_value_address '(' params • ')' s_label compound_stmt

    ')'  shift, and go to state 26


State 22

   11 params: param_list •  [')']
   13 param_list: param_list • ',' param

    ','  shift, and go to state 27

    $default  reduce using rule 11 (params)


State 23

   14 param_list: param •

    $default  reduce using rule 14 (param_list)


State 24

    7 var_declaration: type_specifier ID '[' NUM ']' ';' • s_array_declaration
   77 s_array_declaration: ε •

    $default  reduce using rule 77 (s_array_declaration)

    s_array_declaration  go to state 28


State 25

   15 param: type_specifier ID • s_atomic_param_declaration
   16      | type_specifier ID • '[' ']' s_array_param_declaration
   78 s_atomic_param_declaration: ε •  [')', ',']

    '['  shift, and go to state 29

    $default  reduce using rule 78 (s_atomic_param_declaration)

    s_atomic_param_declaration  go to state 30


State 26

   10 fun_declaration: type_specifier ID s_set_return_value_address '(' params ')' • s_label compound_stmt
   72 s_label: ε •

    $default  reduce using rule 72 (s_label)

    s_label  go to state 31


State 27

    8 type_specifier: • "int"
    9               | • "void"
   13 param_list: param_list ',' • param
   15 param: • type_specifier ID s_atomic_param_declaration
   16      | • type_specifier ID '[' ']' s_array_param_declaration

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 20
    param           go to state 32


State 28

    7 var_declaration: type_specifier ID '[' NUM ']' ';' s_array_declaration •

    $default  reduce using rule 7 (var_declaration)


State 29

   16 param: type_specifier ID '[' • ']' s_array_param_declaration

    ']'  shift, and go to state 33


State 30

   15 param: type_specifier ID s_atomic_param_declaration •

    $default  reduce using rule 15 (param)


State 31

   10 fun_declaration: type_specifier ID s_set_return_value_address '(' params ')' s_label • compound_stmt
   17 compound_stmt: • '{' local_declarations statement_list '}'

    '{'  shift, and go to state 34

    compound_stmt  go to state 35


State 32

   13 param_list: param_list ',' param •

    $default  reduce using rule 13 (param_list)


State 33

   16 param: type_specifier ID '[' ']' • s_array_param_declaration
   79 s_array_param_declaration: ε •

    $default  reduce using rule 79 (s_array_param_declaration)

    s_array_param_declaration  go to state 36


State 34

   17 compound_stmt: '{' • local_declarations statement_list '}'
   18 local_declarations: • local_declarations var_declaration
   19                   | ε •

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 37


State 35

   10 fun_declaration: type_specifier ID s_set_return_value_address '(' params ')' s_label compound_stmt •

    $default  reduce using rule 10 (fun_declaration)


State 36

   16 param: type_specifier ID '[' ']' s_array_param_declaration •

    $default  reduce using rule 16 (param)


State 37

    6 var_declaration: • type_specifier ID ';' s_atomic_var_declaration
    7                | • type_specifier ID '[' NUM ']' ';' s_array_declaration
    8 type_specifier: • "int"
    9               | • "void"
   17 compound_stmt: '{' local_declarations • statement_list '}'
   18 local_declarations: local_declarations • var_declaration
   20 statement_list: • statement_list statement
   21               | ε •  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 38
    type_specifier   go to state 39
    statement_list   go to state 40


State 38

   18 local_declarations: local_declarations var_declaration •

    $default  reduce using rule 18 (local_declarations)


State 39

    6 var_declaration: type_specifier • ID ';' s_atomic_var_declaration
    7                | type_specifier • ID '[' NUM ']' ';' s_array_declaration

    ID  shift, and go to state 41


State 40

   17 compound_stmt: • '{' local_declarations statement_list '}'
   17              | '{' local_declarations statement_list • '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';' s_pop_stack
   29                | • s_check_break "break" s_break_out ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression s_return_expression ';'
   36 switch_stmt: • s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]
   82 s_switch_save: ε •  ["while", "switch"]
   84 s_check_break: ε •  ["break"]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 34
    '}'       shift, and go to state 44
    "if"      shift, and go to state 45
    "return"  shift, and go to state 46

    NUM       reduce using rule 80 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    "break"   reduce using rule 84 (s_check_break)
    $default  reduce using rule 82 (s_switch_save)

    compound_stmt        go to state 47
    statement            go to state 48
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62
    s_switch_save        go to state 63
    s_check_break        go to state 64


State 41

    6 var_declaration: type_specifier ID • ';' s_atomic_var_declaration
    7                | type_specifier ID • '[' NUM ']' ';' s_array_declaration

    ';'  shift, and go to state 12
    '['  shift, and go to state 13


State 42

   30 expression_stmt: ';' •

    $default  reduce using rule 30 (expression_stmt)


State 43

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   58       | '(' • expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 65
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62


State 44

   17 compound_stmt: '{' local_declarations statement_list '}' •

    $default  reduce using rule 17 (compound_stmt)


State 45

   31 selection_stmt: "if" • '(' expression ')' s_save statement s_jpf "endif"
   32               | "if" • '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"

    '('  shift, and go to state 66


State 46

   34 return_stmt: "return" • ';'
   35            | "return" • expression s_return_expression ';'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    ';'  shift, and go to state 67
    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 68
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62


State 47

   23 statement: compound_stmt •

    $default  reduce using rule 23 (statement)


State 48

   20 statement_list: statement_list statement •

    $default  reduce using rule 20 (statement_list)


State 49

   22 statement: expression_stmt •

    $default  reduce using rule 22 (statement)


State 50

   24 statement: selection_stmt •

    $default  reduce using rule 24 (statement)


State 51

   25 statement: iteration_stmt •

    $default  reduce using rule 25 (statement)


State 52

   26 statement: return_stmt •

    $default  reduce using rule 26 (statement)


State 53

   27 statement: switch_stmt •

    $default  reduce using rule 27 (statement)


State 54

   28 expression_stmt: expression • ';' s_pop_stack

    ';'  shift, and go to state 69


State 55

   42 expression: var • '=' expression s_Assign
   59 factor: var •  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 70

    $default  reduce using rule 59 (factor)


State 56

   43 expression: simple_expression •

    $default  reduce using rule 43 (expression)


State 57

   46 simple_expression: additive_expression • relop additive_expression
   47                  | additive_expression •  [';', ']', ')', ',']
   48 relop: • '<'
   49      | • "=="
   50 additive_expression: additive_expression • addop term
   52 addop: • '+'
   53      | • '-'

    '<'   shift, and go to state 71
    "=="  shift, and go to state 72
    '+'   shift, and go to state 73
    '-'   shift, and go to state 74

    $default  reduce using rule 47 (simple_expression)

    relop  go to state 75
    addop  go to state 76


State 58

   51 additive_expression: term •  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term • mulop factor
   56 mulop: • '*'
   57      | • '/'

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78

    $default  reduce using rule 51 (additive_expression)

    mulop  go to state 79


State 59

   55 term: factor •

    $default  reduce using rule 55 (term)


State 60

   60 factor: call •

    $default  reduce using rule 60 (factor)


State 61

   44 var: s_PID • ID
   45    | s_PID • ID '[' expression ']' s_array_select
   62 call: s_PID • ID '(' args ')'

    ID  shift, and go to state 80


State 62

   61 factor: s_push_num • NUM

    NUM  shift, and go to state 81


State 63

   33 iteration_stmt: s_switch_save • "while" s_jmp_to_expr '(' s_label expression ')' s_save statement
   36 switch_stmt: s_switch_save • "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'

    "while"   shift, and go to state 82
    "switch"  shift, and go to state 83


State 64

   29 expression_stmt: s_check_break • "break" s_break_out ';'

    "break"  shift, and go to state 84


State 65

   58 factor: '(' expression • ')'

    ')'  shift, and go to state 85


State 66

   31 selection_stmt: "if" '(' • expression ')' s_save statement s_jpf "endif"
   32               | "if" '(' • expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 86
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62


State 67

   34 return_stmt: "return" ';' •

    $default  reduce using rule 34 (return_stmt)


State 68

   35 return_stmt: "return" expression • s_return_expression ';'
   86 s_return_expression: ε •

    $default  reduce using rule 86 (s_return_expression)

    s_return_expression  go to state 87


State 69

   28 expression_stmt: expression ';' • s_pop_stack
   81 s_pop_stack: ε •

    $default  reduce using rule 81 (s_pop_stack)

    s_pop_stack  go to state 88


State 70

   42 expression: • var '=' expression s_Assign
   42           | var '=' • expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 89
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62


State 71

   48 relop: '<' •

    $default  reduce using rule 48 (relop)


State 72

   49 relop: "==" •

    $default  reduce using rule 49 (relop)


State 73

   52 addop: '+' •

    $default  reduce using rule 52 (addop)


State 74

   53 addop: '-' •

    $default  reduce using rule 53 (addop)


State 75

   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: additive_expression relop • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    var                  go to state 90
    additive_expression  go to state 91
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62


State 76

   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   50 additive_expression: additive_expression addop • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    var         go to state 90
    term        go to state 92
    factor      go to state 59
    call        go to state 60
    s_PID       go to state 61
    s_push_num  go to state 62


State 77

   56 mulop: '*' •

    $default  reduce using rule 56 (mulop)


State 78

   57 mulop: '/' •

    $default  reduce using rule 57 (mulop)


State 79

   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   54 term: term mulop • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    var         go to state 90
    factor      go to state 93
    call        go to state 60
    s_PID       go to state 61
    s_push_num  go to state 62


State 80

   44 var: s_PID ID •  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   45    | s_PID ID • '[' expression ']' s_array_select
   62 call: s_PID ID • '(' args ')'

    '['  shift, and go to state 94
    '('  shift, and go to state 95

    $default  reduce using rule 44 (var)


State 81

   61 factor: s_push_num NUM •

    $default  reduce using rule 61 (factor)


State 82

   33 iteration_stmt: s_switch_save "while" • s_jmp_to_expr '(' s_label expression ')' s_save statement
   74 s_jmp_to_expr: ε •

    $default  reduce using rule 74 (s_jmp_to_expr)

    s_jmp_to_expr  go to state 96


State 83

   36 switch_stmt: s_switch_save "switch" • '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 97


State 84

   29 expression_stmt: s_check_break "break" • s_break_out ';'
   85 s_break_out: ε •

    $default  reduce using rule 85 (s_break_out)

    s_break_out  go to state 98


State 85

   58 factor: '(' expression ')' •

    $default  reduce using rule 58 (factor)


State 86

   31 selection_stmt: "if" '(' expression • ')' s_save statement s_jpf "endif"
   32               | "if" '(' expression • ')' s_save statement "else" s_jpf_save statement s_jp "endif"

    ')'  shift, and go to state 99


State 87

   35 return_stmt: "return" expression s_return_expression • ';'

    ';'  shift, and go to state 100


State 88

   28 expression_stmt: expression ';' s_pop_stack •

    $default  reduce using rule 28 (expression_stmt)


State 89

   42 expression: var '=' expression • s_Assign
   68 s_Assign: ε •

    $default  reduce using rule 68 (s_Assign)

    s_Assign  go to state 101


State 90

   59 factor: var •

    $default  reduce using rule 59 (factor)


State 91

   46 simple_expression: additive_expression relop additive_expression •  [';', ']', ')', ',']
   50 additive_expression: additive_expression • addop term
   52 addop: • '+'
   53      | • '-'

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74

    $default  reduce using rule 46 (simple_expression)

    addop  go to state 76


State 92

   50 additive_expression: additive_expression addop term •  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term • mulop factor
   56 mulop: • '*'
   57      | • '/'

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78

    $default  reduce using rule 50 (additive_expression)

    mulop  go to state 79


State 93

   54 term: term mulop factor •

    $default  reduce using rule 54 (term)


State 94

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   45    | s_PID ID '[' • expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 102
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62


State 95

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   62     | s_PID ID '(' • args ')'
   63 args: • arg_list
   64     | ε •  [')']
   65 arg_list: • arg_list ',' expression
   66         | • expression
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    $default  reduce using rule 64 (args)

    expression           go to state 103
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    args                 go to state 104
    arg_list             go to state 105
    s_PID                go to state 61
    s_push_num           go to state 62


State 96

   33 iteration_stmt: s_switch_save "while" s_jmp_to_expr • '(' s_label expression ')' s_save statement

    '('  shift, and go to state 106


State 97

   36 switch_stmt: s_switch_save "switch" '(' • s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   74 s_jmp_to_expr: ε •

    $default  reduce using rule 74 (s_jmp_to_expr)

    s_jmp_to_expr  go to state 107


State 98

   29 expression_stmt: s_check_break "break" s_break_out • ';'

    ';'  shift, and go to state 108


State 99

   31 selection_stmt: "if" '(' expression ')' • s_save statement s_jpf "endif"
   32               | "if" '(' expression ')' • s_save statement "else" s_jpf_save statement s_jp "endif"
   73 s_save: ε •

    $default  reduce using rule 73 (s_save)

    s_save  go to state 109


State 100

   35 return_stmt: "return" expression s_return_expression ';' •

    $default  reduce using rule 35 (return_stmt)


State 101

   42 expression: var '=' expression s_Assign •

    $default  reduce using rule 42 (expression)


State 102

   45 var: s_PID ID '[' expression • ']' s_array_select

    ']'  shift, and go to state 110


State 103

   66 arg_list: expression •

    $default  reduce using rule 66 (arg_list)


State 104

   62 call: s_PID ID '(' args • ')'

    ')'  shift, and go to state 111


State 105

   63 args: arg_list •  [')']
   65 arg_list: arg_list • ',' expression

    ','  shift, and go to state 112

    $default  reduce using rule 63 (args)


State 106

   33 iteration_stmt: s_switch_save "while" s_jmp_to_expr '(' • s_label expression ')' s_save statement
   72 s_label: ε •

    $default  reduce using rule 72 (s_label)

    s_label  go to state 113


State 107

   36 switch_stmt: s_switch_save "switch" '(' s_jmp_to_expr • expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 114
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62


State 108

   29 expression_stmt: s_check_break "break" s_break_out ';' •

    $default  reduce using rule 29 (expression_stmt)


State 109

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';' s_pop_stack
   29                | • s_check_break "break" s_break_out ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   31               | "if" '(' expression ')' s_save • statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   32               | "if" '(' expression ')' s_save • statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression s_return_expression ';'
   36 switch_stmt: • s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]
   82 s_switch_save: ε •  ["while", "switch"]
   84 s_check_break: ε •  ["break"]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 34
    "if"      shift, and go to state 45
    "return"  shift, and go to state 46

    NUM       reduce using rule 80 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    "break"   reduce using rule 84 (s_check_break)
    $default  reduce using rule 82 (s_switch_save)

    compound_stmt        go to state 47
    statement            go to state 115
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62
    s_switch_save        go to state 63
    s_check_break        go to state 64


State 110

   45 var: s_PID ID '[' expression ']' • s_array_select
   83 s_array_select: ε •

    $default  reduce using rule 83 (s_array_select)

    s_array_select  go to state 116


State 111

   62 call: s_PID ID '(' args ')' •

    $default  reduce using rule 62 (call)


State 112

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   65 arg_list: arg_list ',' • expression
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 117
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62


State 113

   33 iteration_stmt: s_switch_save "while" s_jmp_to_expr '(' s_label • expression ')' s_save statement
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]

    '('  shift, and go to state 43

    NUM       reduce using rule 80 (s_push_num)
    $default  reduce using rule 67 (s_PID)

    expression           go to state 118
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62


State 114

   36 switch_stmt: s_switch_save "switch" '(' s_jmp_to_expr expression • ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 119


State 115

   31 selection_stmt: "if" '(' expression ')' s_save statement • s_jpf "endif"
   32               | "if" '(' expression ')' s_save statement • "else" s_jpf_save statement s_jp "endif"
   69 s_jpf: ε •  ["endif"]

    "else"  shift, and go to state 120

    $default  reduce using rule 69 (s_jpf)

    s_jpf  go to state 121


State 116

   45 var: s_PID ID '[' expression ']' s_array_select •

    $default  reduce using rule 45 (var)


State 117

   65 arg_list: arg_list ',' expression •

    $default  reduce using rule 65 (arg_list)


State 118

   33 iteration_stmt: s_switch_save "while" s_jmp_to_expr '(' s_label expression • ')' s_save statement

    ')'  shift, and go to state 122


State 119

   36 switch_stmt: s_switch_save "switch" '(' s_jmp_to_expr expression ')' • '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 123


State 120

   32 selection_stmt: "if" '(' expression ')' s_save statement "else" • s_jpf_save statement s_jp "endif"
   70 s_jpf_save: ε •

    $default  reduce using rule 70 (s_jpf_save)

    s_jpf_save  go to state 124


State 121

   31 selection_stmt: "if" '(' expression ')' s_save statement s_jpf • "endif"

    "endif"  shift, and go to state 125


State 122

   33 iteration_stmt: s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' • s_save statement
   73 s_save: ε •

    $default  reduce using rule 73 (s_save)

    s_save  go to state 126


State 123

   36 switch_stmt: s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' • case_stmts default_stmt '}'
   37 case_stmts: • case_stmts case_stmt
   38           | ε •

    $default  reduce using rule 38 (case_stmts)

    case_stmts  go to state 127


State 124

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';' s_pop_stack
   29                | • s_check_break "break" s_break_out ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   32               | "if" '(' expression ')' s_save statement "else" s_jpf_save • statement s_jp "endif"
   33 iteration_stmt: • s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression s_return_expression ';'
   36 switch_stmt: • s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]
   82 s_switch_save: ε •  ["while", "switch"]
   84 s_check_break: ε •  ["break"]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 34
    "if"      shift, and go to state 45
    "return"  shift, and go to state 46

    NUM       reduce using rule 80 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    "break"   reduce using rule 84 (s_check_break)
    $default  reduce using rule 82 (s_switch_save)

    compound_stmt        go to state 47
    statement            go to state 128
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62
    s_switch_save        go to state 63
    s_check_break        go to state 64


State 125

   31 selection_stmt: "if" '(' expression ')' s_save statement s_jpf "endif" •

    $default  reduce using rule 31 (selection_stmt)


State 126

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';' s_pop_stack
   29                | • s_check_break "break" s_break_out ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' s_save statement
   33               | s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' s_save • statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression s_return_expression ';'
   36 switch_stmt: • s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]
   82 s_switch_save: ε •  ["while", "switch"]
   84 s_check_break: ε •  ["break"]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 34
    "if"      shift, and go to state 45
    "return"  shift, and go to state 46

    NUM       reduce using rule 80 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    "break"   reduce using rule 84 (s_check_break)
    $default  reduce using rule 82 (s_switch_save)

    compound_stmt        go to state 47
    statement            go to state 129
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62
    s_switch_save        go to state 63
    s_check_break        go to state 64


State 127

   36 switch_stmt: s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts • default_stmt '}'
   37 case_stmts: case_stmts • case_stmt
   39 case_stmt: • "case" s_switch_jf NUM ':' statement_list
   40 default_stmt: • "default" ':' statement_list
   41             | ε •  ['}']

    "case"     shift, and go to state 130
    "default"  shift, and go to state 131

    $default  reduce using rule 41 (default_stmt)

    case_stmt     go to state 132
    default_stmt  go to state 133


State 128

   32 selection_stmt: "if" '(' expression ')' s_save statement "else" s_jpf_save statement • s_jp "endif"
   71 s_jp: ε •

    $default  reduce using rule 71 (s_jp)

    s_jp  go to state 134


State 129

   33 iteration_stmt: s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' s_save statement •

    $default  reduce using rule 33 (iteration_stmt)


State 130

   39 case_stmt: "case" • s_switch_jf NUM ':' statement_list
   75 s_switch_jf: ε •

    $default  reduce using rule 75 (s_switch_jf)

    s_switch_jf  go to state 135


State 131

   40 default_stmt: "default" • ':' statement_list

    ':'  shift, and go to state 136


State 132

   37 case_stmts: case_stmts case_stmt •

    $default  reduce using rule 37 (case_stmts)


State 133

   36 switch_stmt: s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt • '}'

    '}'  shift, and go to state 137


State 134

   32 selection_stmt: "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp • "endif"

    "endif"  shift, and go to state 138


State 135

   39 case_stmt: "case" s_switch_jf • NUM ':' statement_list

    NUM  shift, and go to state 139


State 136

   20 statement_list: • statement_list statement
   21               | ε •
   40 default_stmt: "default" ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 140


State 137

   36 switch_stmt: s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}' •

    $default  reduce using rule 36 (switch_stmt)


State 138

   32 selection_stmt: "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif" •

    $default  reduce using rule 32 (selection_stmt)


State 139

   39 case_stmt: "case" s_switch_jf NUM • ':' statement_list

    ':'  shift, and go to state 141


State 140

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';' s_pop_stack
   29                | • s_check_break "break" s_break_out ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression s_return_expression ';'
   36 switch_stmt: • s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   40 default_stmt: "default" ':' statement_list •  ['}']
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]
   82 s_switch_save: ε •  ["while", "switch"]
   84 s_check_break: ε •  ["break"]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 34
    "if"      shift, and go to state 45
    "return"  shift, and go to state 46

    NUM       reduce using rule 80 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    '}'       reduce using rule 40 (default_stmt)
    "break"   reduce using rule 84 (s_check_break)
    $default  reduce using rule 82 (s_switch_save)

    compound_stmt        go to state 47
    statement            go to state 48
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62
    s_switch_save        go to state 63
    s_check_break        go to state 64


State 141

   20 statement_list: • statement_list statement
   21               | ε •
   39 case_stmt: "case" s_switch_jf NUM ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 142


State 142

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';' s_pop_stack
   29                | • s_check_break "break" s_break_out ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' s_save statement s_jpf "endif"
   32               | • "if" '(' expression ')' s_save statement "else" s_jpf_save statement s_jp "endif"
   33 iteration_stmt: • s_switch_save "while" s_jmp_to_expr '(' s_label expression ')' s_save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression s_return_expression ';'
   36 switch_stmt: • s_switch_save "switch" '(' s_jmp_to_expr expression ')' '{' case_stmts default_stmt '}'
   39 case_stmt: "case" s_switch_jf NUM ':' statement_list •  ['}', "case", "default"]
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']' s_array_select
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • s_push_num NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]
   80 s_push_num: ε •  [NUM]
   82 s_switch_save: ε •  ["while", "switch"]
   84 s_check_break: ε •  ["break"]

    ';'       shift, and go to state 42
    '('       shift, and go to state 43
    '{'       shift, and go to state 34
    "if"      shift, and go to state 45
    "return"  shift, and go to state 46

    NUM       reduce using rule 80 (s_push_num)
    ID        reduce using rule 67 (s_PID)
    "break"   reduce using rule 84 (s_check_break)
    "while"   reduce using rule 82 (s_switch_save)
    "switch"  reduce using rule 82 (s_switch_save)
    $default  reduce using rule 39 (case_stmt)

    compound_stmt        go to state 47
    statement            go to state 48
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
    s_push_num           go to state 62
    s_switch_save        go to state 63
    s_check_break        go to state 64

Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier s_PID ID ';'
    7                | type_specifier s_PID ID '[' NUM ']' ';'

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier s_PID ID '(' params ')' compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier s_PID ID
   16      | type_specifier s_PID ID '[' ']'

   17 compound_stmt: '{' local_declarations statement_list '}'

   18 local_declarations: local_declarations var_declaration
   19                   | ε

   20 statement_list: statement_list statement
   21               | ε

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt

   28 expression_stmt: expression ';'
   29                | "break" ';'
   30                | ';'

   31 selection_stmt: "if" '(' expression ')' statement "endif"
   32               | "if" '(' expression ')' statement "else" statement "endif"

   33 iteration_stmt: "while" '(' expression ')' statement

   34 return_stmt: "return" ';'
   35            | "return" expression ';'

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}'

   37 case_stmts: case_stmts case_stmt
   38           | ε

   39 case_stmt: "case" NUM ':' statement_list

   40 default_stmt: "default" ':' statement_list
   41             | ε

   42 expression: var '=' expression s_Assign
   43           | simple_expression

   44 var: s_PID ID
   45    | s_PID ID '[' expression ']'

   46 simple_expression: additive_expression relop additive_expression
   47                  | additive_expression

   48 relop: '<'
   49      | "=="

   50 additive_expression: additive_expression addop term
   51                    | term

   52 addop: '+'
   53      | '-'

   54 term: term mulop factor
   55     | factor

   56 mulop: '*'
   57      | '/'

   58 factor: '(' expression ')'
   59       | var
   60       | call
   61       | NUM

   62 call: s_PID ID '(' args ')'

   63 args: arg_list
   64     | ε

   65 arg_list: arg_list ',' expression
   66         | expression

   67 s_PID: ε

   68 s_Assign: ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 31 32 33 36 58 62
    ')' (41) 10 31 32 33 36 58 62
    '*' (42) 56
    '+' (43) 52
    ',' (44) 13 65
    '-' (45) 53
    '/' (47) 57
    ':' (58) 39 40
    ';' (59) 6 7 28 29 30 34 35
    '<' (60) 48
    '=' (61) 42
    '[' (91) 7 16 45
    ']' (93) 7 16 45
    '{' (123) 17 36
    '}' (125) 17 36
    error (256)
    NUM (258) 7 39 61
    ID (259) 6 7 10 15 16 44 45 62
    "int" (260) 8
    "void" (261) 9 12
    "break" (262) 29
    "if" (263) 31 32
    "endif" (264) 31 32
    "else" (265) 32
    "while" (266) 33
    "return" (267) 34 35
    "switch" (268) 36
    "case" (269) 39
    "default" (270) 40
    "==" (271) 49


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    declaration_list (34)
        on left: 2 3
        on right: 1 2
    declaration (35)
        on left: 4 5
        on right: 2 3
    var_declaration (36)
        on left: 6 7
        on right: 4 18
    type_specifier (37)
        on left: 8 9
        on right: 6 7 10 15 16
    fun_declaration (38)
        on left: 10
        on right: 5
    params (39)
        on left: 11 12
        on right: 10
    param_list (40)
        on left: 13 14
        on right: 11 13
    param (41)
        on left: 15 16
        on right: 13 14
    compound_stmt (42)
        on left: 17
        on right: 10 23
    local_declarations (43)
        on left: 18 19
        on right: 17 18
    statement_list (44)
        on left: 20 21
        on right: 17 20 39 40
    statement (45)
        on left: 22 23 24 25 26 27
        on right: 20 31 32 33
    expression_stmt (46)
        on left: 28 29 30
        on right: 22
    selection_stmt (47)
        on left: 31 32
        on right: 24
    iteration_stmt (48)
        on left: 33
        on right: 25
    return_stmt (49)
        on left: 34 35
        on right: 26
    switch_stmt (50)
        on left: 36
        on right: 27
    case_stmts (51)
        on left: 37 38
        on right: 36 37
    case_stmt (52)
        on left: 39
        on right: 37
    default_stmt (53)
        on left: 40 41
        on right: 36
    expression (54)
        on left: 42 43
        on right: 28 31 32 33 35 36 42 45 58 65 66
    var (55)
        on left: 44 45
        on right: 42 59
    simple_expression (56)
        on left: 46 47
        on right: 43
    relop (57)
        on left: 48 49
        on right: 46
    additive_expression (58)
        on left: 50 51
        on right: 46 47 50
    addop (59)
        on left: 52 53
        on right: 50
    term (60)
        on left: 54 55
        on right: 50 51 54
    mulop (61)
        on left: 56 57
        on right: 54
    factor (62)
        on left: 58 59 60 61
        on right: 54 55
    call (63)
        on left: 62
        on right: 60
    args (64)
        on left: 63 64
        on right: 62
    arg_list (65)
        on left: 65 66
        on right: 63 65
    s_PID (66)
        on left: 67
        on right: 6 7 10 15 16 44 45 62
    s_Assign (67)
        on left: 68
        on right: 42


State 0

    0 $accept: • program $end
    1 program: • declaration_list
    2 declaration_list: • declaration_list declaration
    3                 | • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier s_PID ID ';'
    7                | • type_specifier s_PID ID '[' NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier s_PID ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


State 1

    8 type_specifier: "int" •

    $default  reduce using rule 8 (type_specifier)


State 2

    9 type_specifier: "void" •

    $default  reduce using rule 9 (type_specifier)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declaration_list •  [$end]
    2 declaration_list: declaration_list • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier s_PID ID ';'
    7                | • type_specifier s_PID ID '[' NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier s_PID ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


State 5

    3 declaration_list: declaration •

    $default  reduce using rule 3 (declaration_list)


State 6

    4 declaration: var_declaration •

    $default  reduce using rule 4 (declaration)


State 7

    6 var_declaration: type_specifier • s_PID ID ';'
    7                | type_specifier • s_PID ID '[' NUM ']' ';'
   10 fun_declaration: type_specifier • s_PID ID '(' params ')' compound_stmt
   67 s_PID: ε •

    $default  reduce using rule 67 (s_PID)

    s_PID  go to state 11


State 8

    5 declaration: fun_declaration •

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declaration_list: declaration_list declaration •

    $default  reduce using rule 2 (declaration_list)


State 11

    6 var_declaration: type_specifier s_PID • ID ';'
    7                | type_specifier s_PID • ID '[' NUM ']' ';'
   10 fun_declaration: type_specifier s_PID • ID '(' params ')' compound_stmt

    ID  shift, and go to state 12


State 12

    6 var_declaration: type_specifier s_PID ID • ';'
    7                | type_specifier s_PID ID • '[' NUM ']' ';'
   10 fun_declaration: type_specifier s_PID ID • '(' params ')' compound_stmt

    ';'  shift, and go to state 13
    '['  shift, and go to state 14
    '('  shift, and go to state 15


State 13

    6 var_declaration: type_specifier s_PID ID ';' •

    $default  reduce using rule 6 (var_declaration)


State 14

    7 var_declaration: type_specifier s_PID ID '[' • NUM ']' ';'

    NUM  shift, and go to state 16


State 15

    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: type_specifier s_PID ID '(' • params ')' compound_stmt
   11 params: • param_list
   12       | • "void"
   13 param_list: • param_list ',' param
   14           | • param
   15 param: • type_specifier s_PID ID
   16      | • type_specifier s_PID ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 17

    type_specifier  go to state 18
    params          go to state 19
    param_list      go to state 20
    param           go to state 21


State 16

    7 var_declaration: type_specifier s_PID ID '[' NUM • ']' ';'

    ']'  shift, and go to state 22


State 17

    9 type_specifier: "void" •  [ID]
   12 params: "void" •  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


State 18

   15 param: type_specifier • s_PID ID
   16      | type_specifier • s_PID ID '[' ']'
   67 s_PID: ε •

    $default  reduce using rule 67 (s_PID)

    s_PID  go to state 23


State 19

   10 fun_declaration: type_specifier s_PID ID '(' params • ')' compound_stmt

    ')'  shift, and go to state 24


State 20

   11 params: param_list •  [')']
   13 param_list: param_list • ',' param

    ','  shift, and go to state 25

    $default  reduce using rule 11 (params)


State 21

   14 param_list: param •

    $default  reduce using rule 14 (param_list)


State 22

    7 var_declaration: type_specifier s_PID ID '[' NUM ']' • ';'

    ';'  shift, and go to state 26


State 23

   15 param: type_specifier s_PID • ID
   16      | type_specifier s_PID • ID '[' ']'

    ID  shift, and go to state 27


State 24

   10 fun_declaration: type_specifier s_PID ID '(' params ')' • compound_stmt
   17 compound_stmt: • '{' local_declarations statement_list '}'

    '{'  shift, and go to state 28

    compound_stmt  go to state 29


State 25

    8 type_specifier: • "int"
    9               | • "void"
   13 param_list: param_list ',' • param
   15 param: • type_specifier s_PID ID
   16      | • type_specifier s_PID ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 18
    param           go to state 30


State 26

    7 var_declaration: type_specifier s_PID ID '[' NUM ']' ';' •

    $default  reduce using rule 7 (var_declaration)


State 27

   15 param: type_specifier s_PID ID •  [')', ',']
   16      | type_specifier s_PID ID • '[' ']'

    '['  shift, and go to state 31

    $default  reduce using rule 15 (param)


State 28

   17 compound_stmt: '{' • local_declarations statement_list '}'
   18 local_declarations: • local_declarations var_declaration
   19                   | ε •

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 32


State 29

   10 fun_declaration: type_specifier s_PID ID '(' params ')' compound_stmt •

    $default  reduce using rule 10 (fun_declaration)


State 30

   13 param_list: param_list ',' param •

    $default  reduce using rule 13 (param_list)


State 31

   16 param: type_specifier s_PID ID '[' • ']'

    ']'  shift, and go to state 33


State 32

    6 var_declaration: • type_specifier s_PID ID ';'
    7                | • type_specifier s_PID ID '[' NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   17 compound_stmt: '{' local_declarations • statement_list '}'
   18 local_declarations: local_declarations • var_declaration
   20 statement_list: • statement_list statement
   21               | ε •  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 34
    type_specifier   go to state 35
    statement_list   go to state 36


State 33

   16 param: type_specifier s_PID ID '[' ']' •

    $default  reduce using rule 16 (param)


State 34

   18 local_declarations: local_declarations var_declaration •

    $default  reduce using rule 18 (local_declarations)


State 35

    6 var_declaration: type_specifier • s_PID ID ';'
    7                | type_specifier • s_PID ID '[' NUM ']' ';'
   67 s_PID: ε •

    $default  reduce using rule 67 (s_PID)

    s_PID  go to state 37


State 36

   17 compound_stmt: • '{' local_declarations statement_list '}'
   17              | '{' local_declarations statement_list • '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' statement "endif"
   32               | • "if" '(' expression ')' statement "else" statement "endif"
   33 iteration_stmt: • "while" '(' expression ')' statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM       shift, and go to state 38
    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    '}'       shift, and go to state 41
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46

    $default  reduce using rule 67 (s_PID)

    compound_stmt        go to state 47
    statement            go to state 48
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 37

    6 var_declaration: type_specifier s_PID • ID ';'
    7                | type_specifier s_PID • ID '[' NUM ']' ';'

    ID  shift, and go to state 62


State 38

   61 factor: NUM •

    $default  reduce using rule 61 (factor)


State 39

   30 expression_stmt: ';' •

    $default  reduce using rule 30 (expression_stmt)


State 40

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   58       | '(' • expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    expression           go to state 63
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 41

   17 compound_stmt: '{' local_declarations statement_list '}' •

    $default  reduce using rule 17 (compound_stmt)


State 42

   29 expression_stmt: "break" • ';'

    ';'  shift, and go to state 64


State 43

   31 selection_stmt: "if" • '(' expression ')' statement "endif"
   32               | "if" • '(' expression ')' statement "else" statement "endif"

    '('  shift, and go to state 65


State 44

   33 iteration_stmt: "while" • '(' expression ')' statement

    '('  shift, and go to state 66


State 45

   34 return_stmt: "return" • ';'
   35            | "return" • expression ';'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    ';'  shift, and go to state 67
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    expression           go to state 68
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 46

   36 switch_stmt: "switch" • '(' expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 69


State 47

   23 statement: compound_stmt •

    $default  reduce using rule 23 (statement)


State 48

   20 statement_list: statement_list statement •

    $default  reduce using rule 20 (statement_list)


State 49

   22 statement: expression_stmt •

    $default  reduce using rule 22 (statement)


State 50

   24 statement: selection_stmt •

    $default  reduce using rule 24 (statement)


State 51

   25 statement: iteration_stmt •

    $default  reduce using rule 25 (statement)


State 52

   26 statement: return_stmt •

    $default  reduce using rule 26 (statement)


State 53

   27 statement: switch_stmt •

    $default  reduce using rule 27 (statement)


State 54

   28 expression_stmt: expression • ';'

    ';'  shift, and go to state 70


State 55

   42 expression: var • '=' expression s_Assign
   59 factor: var •  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 71

    $default  reduce using rule 59 (factor)


State 56

   43 expression: simple_expression •

    $default  reduce using rule 43 (expression)


State 57

   46 simple_expression: additive_expression • relop additive_expression
   47                  | additive_expression •  [';', ']', ')', ',']
   48 relop: • '<'
   49      | • "=="
   50 additive_expression: additive_expression • addop term
   52 addop: • '+'
   53      | • '-'

    '<'   shift, and go to state 72
    "=="  shift, and go to state 73
    '+'   shift, and go to state 74
    '-'   shift, and go to state 75

    $default  reduce using rule 47 (simple_expression)

    relop  go to state 76
    addop  go to state 77


State 58

   51 additive_expression: term •  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term • mulop factor
   56 mulop: • '*'
   57      | • '/'

    '*'  shift, and go to state 78
    '/'  shift, and go to state 79

    $default  reduce using rule 51 (additive_expression)

    mulop  go to state 80


State 59

   55 term: factor •

    $default  reduce using rule 55 (term)


State 60

   60 factor: call •

    $default  reduce using rule 60 (factor)


State 61

   44 var: s_PID • ID
   45    | s_PID • ID '[' expression ']'
   62 call: s_PID • ID '(' args ')'

    ID  shift, and go to state 81


State 62

    6 var_declaration: type_specifier s_PID ID • ';'
    7                | type_specifier s_PID ID • '[' NUM ']' ';'

    ';'  shift, and go to state 13
    '['  shift, and go to state 14


State 63

   58 factor: '(' expression • ')'

    ')'  shift, and go to state 82


State 64

   29 expression_stmt: "break" ';' •

    $default  reduce using rule 29 (expression_stmt)


State 65

   31 selection_stmt: "if" '(' • expression ')' statement "endif"
   32               | "if" '(' • expression ')' statement "else" statement "endif"
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    expression           go to state 83
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 66

   33 iteration_stmt: "while" '(' • expression ')' statement
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    expression           go to state 84
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 67

   34 return_stmt: "return" ';' •

    $default  reduce using rule 34 (return_stmt)


State 68

   35 return_stmt: "return" expression • ';'

    ';'  shift, and go to state 85


State 69

   36 switch_stmt: "switch" '(' • expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    expression           go to state 86
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 70

   28 expression_stmt: expression ';' •

    $default  reduce using rule 28 (expression_stmt)


State 71

   42 expression: • var '=' expression s_Assign
   42           | var '=' • expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    expression           go to state 87
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 72

   48 relop: '<' •

    $default  reduce using rule 48 (relop)


State 73

   49 relop: "==" •

    $default  reduce using rule 49 (relop)


State 74

   52 addop: '+' •

    $default  reduce using rule 52 (addop)


State 75

   53 addop: '-' •

    $default  reduce using rule 53 (addop)


State 76

   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: additive_expression relop • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    var                  go to state 88
    additive_expression  go to state 89
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 77

   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   50 additive_expression: additive_expression addop • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    var     go to state 88
    term    go to state 90
    factor  go to state 59
    call    go to state 60
    s_PID   go to state 61


State 78

   56 mulop: '*' •

    $default  reduce using rule 56 (mulop)


State 79

   57 mulop: '/' •

    $default  reduce using rule 57 (mulop)


State 80

   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   54 term: term mulop • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    var     go to state 88
    factor  go to state 91
    call    go to state 60
    s_PID   go to state 61


State 81

   44 var: s_PID ID •  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   45    | s_PID ID • '[' expression ']'
   62 call: s_PID ID • '(' args ')'

    '['  shift, and go to state 92
    '('  shift, and go to state 93

    $default  reduce using rule 44 (var)


State 82

   58 factor: '(' expression ')' •

    $default  reduce using rule 58 (factor)


State 83

   31 selection_stmt: "if" '(' expression • ')' statement "endif"
   32               | "if" '(' expression • ')' statement "else" statement "endif"

    ')'  shift, and go to state 94


State 84

   33 iteration_stmt: "while" '(' expression • ')' statement

    ')'  shift, and go to state 95


State 85

   35 return_stmt: "return" expression ';' •

    $default  reduce using rule 35 (return_stmt)


State 86

   36 switch_stmt: "switch" '(' expression • ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 96


State 87

   42 expression: var '=' expression • s_Assign
   68 s_Assign: ε •

    $default  reduce using rule 68 (s_Assign)

    s_Assign  go to state 97


State 88

   59 factor: var •

    $default  reduce using rule 59 (factor)


State 89

   46 simple_expression: additive_expression relop additive_expression •  [';', ']', ')', ',']
   50 additive_expression: additive_expression • addop term
   52 addop: • '+'
   53      | • '-'

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75

    $default  reduce using rule 46 (simple_expression)

    addop  go to state 77


State 90

   50 additive_expression: additive_expression addop term •  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term • mulop factor
   56 mulop: • '*'
   57      | • '/'

    '*'  shift, and go to state 78
    '/'  shift, and go to state 79

    $default  reduce using rule 50 (additive_expression)

    mulop  go to state 80


State 91

   54 term: term mulop factor •

    $default  reduce using rule 54 (term)


State 92

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   45    | s_PID ID '[' • expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    expression           go to state 98
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 93

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   62     | s_PID ID '(' • args ')'
   63 args: • arg_list
   64     | ε •  [')']
   65 arg_list: • arg_list ',' expression
   66         | • expression
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    ID        reduce using rule 67 (s_PID)
    $default  reduce using rule 64 (args)

    expression           go to state 99
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    args                 go to state 100
    arg_list             go to state 101
    s_PID                go to state 61


State 94

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' statement "endif"
   31               | "if" '(' expression ')' • statement "endif"
   32               | • "if" '(' expression ')' statement "else" statement "endif"
   32               | "if" '(' expression ')' • statement "else" statement "endif"
   33 iteration_stmt: • "while" '(' expression ')' statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM       shift, and go to state 38
    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46

    $default  reduce using rule 67 (s_PID)

    compound_stmt        go to state 47
    statement            go to state 102
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 95

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' statement "endif"
   32               | • "if" '(' expression ')' statement "else" statement "endif"
   33 iteration_stmt: • "while" '(' expression ')' statement
   33               | "while" '(' expression ')' • statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM       shift, and go to state 38
    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46

    $default  reduce using rule 67 (s_PID)

    compound_stmt        go to state 47
    statement            go to state 103
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 96

   36 switch_stmt: "switch" '(' expression ')' • '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 104


State 97

   42 expression: var '=' expression s_Assign •

    $default  reduce using rule 42 (expression)


State 98

   45 var: s_PID ID '[' expression • ']'

    ']'  shift, and go to state 105


State 99

   66 arg_list: expression •

    $default  reduce using rule 66 (arg_list)


State 100

   62 call: s_PID ID '(' args • ')'

    ')'  shift, and go to state 106


State 101

   63 args: arg_list •  [')']
   65 arg_list: arg_list • ',' expression

    ','  shift, and go to state 107

    $default  reduce using rule 63 (args)


State 102

   31 selection_stmt: "if" '(' expression ')' statement • "endif"
   32               | "if" '(' expression ')' statement • "else" statement "endif"

    "endif"  shift, and go to state 108
    "else"   shift, and go to state 109


State 103

   33 iteration_stmt: "while" '(' expression ')' statement •

    $default  reduce using rule 33 (iteration_stmt)


State 104

   36 switch_stmt: "switch" '(' expression ')' '{' • case_stmts default_stmt '}'
   37 case_stmts: • case_stmts case_stmt
   38           | ε •

    $default  reduce using rule 38 (case_stmts)

    case_stmts  go to state 110


State 105

   45 var: s_PID ID '[' expression ']' •

    $default  reduce using rule 45 (var)


State 106

   62 call: s_PID ID '(' args ')' •

    $default  reduce using rule 62 (call)


State 107

   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   65 arg_list: arg_list ',' • expression
   67 s_PID: ε •  [ID]

    NUM  shift, and go to state 38
    '('  shift, and go to state 40

    $default  reduce using rule 67 (s_PID)

    expression           go to state 111
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 108

   31 selection_stmt: "if" '(' expression ')' statement "endif" •

    $default  reduce using rule 31 (selection_stmt)


State 109

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' statement "endif"
   32               | • "if" '(' expression ')' statement "else" statement "endif"
   32               | "if" '(' expression ')' statement "else" • statement "endif"
   33 iteration_stmt: • "while" '(' expression ')' statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM       shift, and go to state 38
    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46

    $default  reduce using rule 67 (s_PID)

    compound_stmt        go to state 47
    statement            go to state 112
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 110

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts • default_stmt '}'
   37 case_stmts: case_stmts • case_stmt
   39 case_stmt: • "case" NUM ':' statement_list
   40 default_stmt: • "default" ':' statement_list
   41             | ε •  ['}']

    "case"     shift, and go to state 113
    "default"  shift, and go to state 114

    $default  reduce using rule 41 (default_stmt)

    case_stmt     go to state 115
    default_stmt  go to state 116


State 111

   65 arg_list: arg_list ',' expression •

    $default  reduce using rule 65 (arg_list)


State 112

   32 selection_stmt: "if" '(' expression ')' statement "else" statement • "endif"

    "endif"  shift, and go to state 117


State 113

   39 case_stmt: "case" • NUM ':' statement_list

    NUM  shift, and go to state 118


State 114

   40 default_stmt: "default" • ':' statement_list

    ':'  shift, and go to state 119


State 115

   37 case_stmts: case_stmts case_stmt •

    $default  reduce using rule 37 (case_stmts)


State 116

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt • '}'

    '}'  shift, and go to state 120


State 117

   32 selection_stmt: "if" '(' expression ')' statement "else" statement "endif" •

    $default  reduce using rule 32 (selection_stmt)


State 118

   39 case_stmt: "case" NUM • ':' statement_list

    ':'  shift, and go to state 121


State 119

   20 statement_list: • statement_list statement
   21               | ε •
   40 default_stmt: "default" ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 122


State 120

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}' •

    $default  reduce using rule 36 (switch_stmt)


State 121

   20 statement_list: • statement_list statement
   21               | ε •
   39 case_stmt: "case" NUM ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 123


State 122

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' statement "endif"
   32               | • "if" '(' expression ')' statement "else" statement "endif"
   33 iteration_stmt: • "while" '(' expression ')' statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   40 default_stmt: "default" ':' statement_list •  ['}']
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM       shift, and go to state 38
    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46

    ID        reduce using rule 67 (s_PID)
    $default  reduce using rule 40 (default_stmt)

    compound_stmt        go to state 47
    statement            go to state 48
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61


State 123

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' statement "endif"
   32               | • "if" '(' expression ')' statement "else" statement "endif"
   33 iteration_stmt: • "while" '(' expression ')' statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   39 case_stmt: "case" NUM ':' statement_list •  ['}', "case", "default"]
   42 expression: • var '=' expression s_Assign
   43           | • simple_expression
   44 var: • s_PID ID
   45    | • s_PID ID '[' expression ']'
   46 simple_expression: • additive_expression relop additive_expression
   47                  | • additive_expression
   50 additive_expression: • additive_expression addop term
   51                    | • term
   54 term: • term mulop factor
   55     | • factor
   58 factor: • '(' expression ')'
   59       | • var
   60       | • call
   61       | • NUM
   62 call: • s_PID ID '(' args ')'
   67 s_PID: ε •  [ID]

    NUM       shift, and go to state 38
    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46

    ID        reduce using rule 67 (s_PID)
    $default  reduce using rule 39 (case_stmt)

    compound_stmt        go to state 47
    statement            go to state 48
    expression_stmt      go to state 49
    selection_stmt       go to state 50
    iteration_stmt       go to state 51
    return_stmt          go to state 52
    switch_stmt          go to state 53
    expression           go to state 54
    var                  go to state 55
    simple_expression    go to state 56
    additive_expression  go to state 57
    term                 go to state 58
    factor               go to state 59
    call                 go to state 60
    s_PID                go to state 61
